@using Maker.RampEdge.Models
@using Maker.RampEdge.Services.Contracts
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IProductService ProductService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="product-card @CssClass"
     role="listitem"
     tabindex="0"
     @onclick="HandleCardClick"
     @onkeydown="HandleKeyDown"
     aria-label="Product: @(_product?.Title ?? Sku)">

    @if (_product == null && _isLoading)
    {
        <div class="product-card-skeleton" aria-label="Loading product">
            <div class="skeleton-image"></div>
            <div class="skeleton-content">
                <div class="skeleton-title"></div>
                <div class="skeleton-summary"></div>
                <div class="skeleton-price"></div>
            </div>
        </div>
    }
    else if (_product == null && _hasError)
    {
        <div class="product-card-error" role="alert">
            <div class="error-icon">‚ö†Ô∏è</div>
            <div class="error-message">
                <h4>Product Unavailable</h4>
                <p>@_errorMessage</p>
                <button type="button" @onclick="RetryLoad" class="retry-button">
                    Retry
                </button>
            </div>
        </div>
    }
    else if (_product != null)
    {
        <div class="product-card-content">
            <div class="product-image-container">
                @if (_product.Media.Any(m => m.Kind == "image"))
                {
                    var primaryImage = _product.Media.First(m => m.Kind == "image");
                    <img src="@primaryImage.Url"
                         alt="@(!string.IsNullOrEmpty(primaryImage.Alt) ? primaryImage.Alt : _product.Title)"
                         class="product-image"
                         loading="lazy"
                         @onerror="HandleImageError" />
                }
                else
                {
                    <div class="product-image-placeholder" aria-label="No image available">
                        üì¶
                    </div>
                }

                @if (ShowAvailabilityBadge)
                {
                    <div class="availability-badge @GetAvailabilityClass()" role="status">
                        @GetAvailabilityText()
                    </div>
                }
            </div>

            <div class="product-content">
                <h3 class="product-title">@_product.Title</h3>

                @if (!string.IsNullOrEmpty(_product.Summary))
                {
                    <p class="product-summary">@_product.Summary</p>
                }

                <div class="product-specs">
                    @if (_product.Specifications.Any())
                    {
                        @foreach (var spec in _product.Specifications.Take(3))
                        {
                            <div class="spec-item">
                                <span class="spec-key">@spec.Key:</span>
                                <span class="spec-value">@spec.Value @spec.Unit</span>
                            </div>
                        }
                    }
                </div>

                <div class="product-pricing">
                    <span class="product-price" aria-label="Price: @_product.Price @_product.Currency">
                        @FormatPrice(_product.Price, _product.Currency)
                    </span>

                    @if (_product.MinimumOrderQuantity > 1)
                    {
                        <span class="moq-badge" title="Minimum Order Quantity">
                            MOQ: @_product.MinimumOrderQuantity
                        </span>
                    }
                </div>

                @if (ShowActions)
                {
                    <div class="product-actions">
                        <button type="button" @onclick="HandleViewDetails" class="action-button primary">
                            View Details
                        </button>
                        <button type="button" @onclick="HandleAddToCart" class="action-button secondary">
                            Add to Cart
                        </button>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Sku { get; set; } = string.Empty;
    [Parameter] public Product? Product { get; set; }
    [Parameter] public string CssClass { get; set; } = string.Empty;
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool ShowAvailabilityBadge { get; set; } = true;
    [Parameter] public EventCallback<Product> OnCardClick { get; set; }
    [Parameter] public EventCallback<Product> OnViewDetails { get; set; }
    [Parameter] public EventCallback<Product> OnAddToCart { get; set; }

    private Product? _product;
    private bool _isLoading;
    private bool _hasError;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (Product != null)
        {
            _product = Product;
        }
        else if (!string.IsNullOrEmpty(Sku))
        {
            await LoadProductAsync();
        }

        ProductService.OnProductChanged += HandleProductChanged;
        ProductService.OnError += HandleServiceError;
    }

    private async Task LoadProductAsync()
    {
        if (string.IsNullOrEmpty(Sku))
            return;

        _isLoading = true;
        _hasError = false;
        StateHasChanged();

        try
        {
            _product = await ProductService.GetProductAsync(Sku);

            if (_product != null)
            {
                await EmitViewEvent();
            }
            else
            {
                _hasError = true;
                _errorMessage = "Product not found";
            }
        }
        catch (Exception ex)
        {
            _hasError = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleCardClick()
    {
        if (_product != null)
        {
            await OnCardClick.InvokeAsync(_product);
            await EmitClickEvent();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == " ")
        {
            await HandleCardClick();
        }
    }

    private async Task HandleViewDetails()
    {
        if (_product != null)
        {
            await OnViewDetails.InvokeAsync(_product);
        }
    }

    private async Task HandleAddToCart()
    {
        if (_product != null)
        {
            await OnAddToCart.InvokeAsync(_product);
        }
    }

    private async Task RetryLoad()
    {
        await LoadProductAsync();
    }

    private void HandleImageError()
    {
        // Image failed to load - could show placeholder or log error
    }

    private void HandleProductChanged(ProductChange change)
    {
        if (change.Sku == Sku && change.Product != null)
        {
            _product = change.Product;
            InvokeAsync(StateHasChanged);
        }
    }

    private void HandleServiceError(string error)
    {
        _hasError = true;
        _errorMessage = error;
        InvokeAsync(StateHasChanged);
    }

    private string GetAvailabilityClass()
    {
        if (_product?.Availability == null)
            return "unknown";

        return _product.Availability.Status.ToLowerInvariant() switch
        {
            "available" => _product.InStock ? "in-stock" : "low-stock",
            "backorder" => "backorder",
            "discontinued" => "discontinued",
            _ => "unknown"
        };
    }

    private string GetAvailabilityText()
    {
        if (_product?.Availability == null)
            return "Unknown";

        return _product.Availability.Status.ToLowerInvariant() switch
        {
            "available" => _product.InStock ? "In Stock" : "Low Stock",
            "backorder" => $"Backorder ({_product.Availability.LeadTimeDays}d)",
            "discontinued" => "Discontinued",
            _ => "Unknown"
        };
    }

    private string FormatPrice(decimal price, string currency)
    {
        return currency.ToUpperInvariant() switch
        {
            "USD" => $"${price:F2}",
            "EUR" => $"‚Ç¨{price:F2}",
            "GBP" => $"¬£{price:F2}",
            _ => $"{price:F2} {currency}"
        };
    }

    private async Task EmitViewEvent()
    {
        if (_product != null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("window.dispatchEvent",
                    new {
                        type = "product.view",
                        detail = new {
                            sku = _product.Sku,
                            title = _product.Title,
                            timestamp = DateTime.UtcNow.ToString("O")
                        }
                    });
            }
            catch (Exception ex)
            {
                // Silently handle JS interop errors
                Console.WriteLine($"Failed to emit product.view event: {ex.Message}");
            }
        }
    }

    private async Task EmitClickEvent()
    {
        if (_product != null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("window.dispatchEvent",
                    new {
                        type = "product.card.click",
                        detail = new {
                            sku = _product.Sku,
                            title = _product.Title,
                            timestamp = DateTime.UtcNow.ToString("O")
                        }
                    });
            }
            catch (Exception ex)
            {
                // Silently handle JS interop errors
                Console.WriteLine($"Failed to emit product.card.click event: {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        ProductService.OnProductChanged -= HandleProductChanged;
        ProductService.OnError -= HandleServiceError;
    }
}