@using Maker.RampEdge.Models
@using Maker.RampEdge.Services.Contracts
@using Microsoft.JSInterop
@inject IProductService ProductService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="product-list @CssClass" role="list" aria-label="Product catalog">

    @if (ShowHeader)
    {
        <div class="product-list-header">
            <h2 class="list-title">
                @if (!string.IsNullOrEmpty(Title))
                {
                    @Title
                }
                else if (!string.IsNullOrEmpty(Category))
                {
                    @($"{Category} Products")
                }
                else
                {
                    <text>Products</text>
                }
            </h2>

            @if (_response != null && _response.TotalCount > 0)
            {
                <div class="list-summary" aria-live="polite">
                    Showing @GetItemRange() of @_response.TotalCount products
                </div>
            }
        </div>
    }

    <div class="product-grid @GetGridClass()">
        @if (_isLoading && !_products.Any())
        {
            @for (int i = 0; i < PageSize; i++)
            {
                <div class="product-card-skeleton" role="listitem" aria-label="Loading product @(i + 1)">
                    <div class="skeleton-image"></div>
                    <div class="skeleton-content">
                        <div class="skeleton-title"></div>
                        <div class="skeleton-summary"></div>
                        <div class="skeleton-price"></div>
                    </div>
                </div>
            }
        }
        else if (_hasError && !_products.Any())
        {
            <div class="product-list-error" role="alert">
                <div class="error-content">
                    <h3>Unable to Load Products</h3>
                    <p>@_errorMessage</p>
                    <button type="button" @onclick="RetryLoad" class="retry-button">
                        Try Again
                    </button>
                </div>
            </div>
        }
        else if (!_products.Any())
        {
            <div class="product-list-empty">
                <div class="empty-content">
                    <div class="empty-icon">üì¶</div>
                    <h3>No Products Found</h3>
                    <p>
                        @if (!string.IsNullOrEmpty(Search))
                        {
                            <text>No products match your search for "@Search".</text>
                        }
                        else if (!string.IsNullOrEmpty(Category))
                        {
                            <text>No products found in the @Category category.</text>
                        }
                        else
                        {
                            <text>No products are currently available.</text>
                        }
                    </p>
                </div>
            </div>
        }
        else
        {
            @foreach (var product in _products)
            {
                <ProductCard Product="product"
                           OnCardClick="HandleProductClick"
                           OnViewDetails="HandleViewDetails"
                           OnAddToCart="HandleAddToCart"
                           ShowActions="ShowActions"
                           ShowAvailabilityBadge="ShowAvailabilityBadge" />
            }
        }
    </div>

    @if (ShowPagination && _response != null && (_response.HasNextPage || _response.HasPreviousPage))
    {
        <div class="product-pagination" role="navigation" aria-label="Product list pagination">
            <button type="button"
                    @onclick="PreviousPage"
                    disabled="@(!_response.HasPreviousPage || _isLoading)"
                    class="pagination-button"
                    aria-label="Go to previous page">
                ‚Üê Previous
            </button>

            <span class="pagination-info" aria-live="polite">
                Page @_response.Page of @GetTotalPages()
            </span>

            <button type="button"
                    @onclick="NextPage"
                    disabled="@(!_response.HasNextPage || _isLoading)"
                    class="pagination-button"
                    aria-label="Go to next page">
                Next ‚Üí
            </button>
        </div>
    }

    @if (_isLoading && _products.Any())
    {
        <div class="loading-indicator" role="status" aria-live="polite">
            <span class="loading-spinner"></span>
            <span class="loading-text">Updating products...</span>
        </div>
    }
</div>

@code {
    [Parameter] public string Category { get; set; } = string.Empty;
    [Parameter] public string Search { get; set; } = string.Empty;
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public int PageSize { get; set; } = 24;
    [Parameter] public int Page { get; set; } = 1;
    [Parameter] public string CssClass { get; set; } = string.Empty;
    [Parameter] public string GridColumns { get; set; } = "auto"; // auto, 2, 3, 4
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool ShowPagination { get; set; } = true;
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool ShowAvailabilityBadge { get; set; } = true;
    [Parameter] public bool EnableDeltaRefresh { get; set; } = true;
    [Parameter] public TimeSpan DeltaRefreshInterval { get; set; } = TimeSpan.FromSeconds(2);
    [Parameter] public EventCallback<Product> OnProductClick { get; set; }
    [Parameter] public EventCallback<Product> OnViewDetails { get; set; }
    [Parameter] public EventCallback<Product> OnAddToCart { get; set; }

    private List<Product> _products = new();
    private ProductListResponse? _response;
    private bool _isLoading;
    private bool _hasError;
    private string _errorMessage = string.Empty;
    private Timer? _deltaRefreshTimer;

    protected override async Task OnInitializedAsync()
    {
        ProductService.OnProductsChanged += HandleProductsChanged;
        ProductService.OnError += HandleServiceError;

        await LoadProductsAsync();

        if (EnableDeltaRefresh)
        {
            await StartDeltaRefresh();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Reload if key parameters changed
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        _isLoading = true;
        _hasError = false;
        StateHasChanged();

        try
        {
            var options = new ProductListOptions
            {
                Category = Category,
                Search = Search,
                Page = Page,
                PageSize = PageSize
            };

            _response = await ProductService.GetProductsAsync(options);
            _products = _response.Products;
        }
        catch (Exception ex)
        {
            _hasError = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RetryLoad()
    {
        await LoadProductsAsync();
    }

    private async Task NextPage()
    {
        if (_response?.HasNextPage == true)
        {
            Page++;
            await LoadProductsAsync();
        }
    }

    private async Task PreviousPage()
    {
        if (_response?.HasPreviousPage == true && Page > 1)
        {
            Page--;
            await LoadProductsAsync();
        }
    }

    private async Task HandleProductClick(Product product)
    {
        await OnProductClick.InvokeAsync(product);
    }

    private async Task HandleViewDetails(Product product)
    {
        await OnViewDetails.InvokeAsync(product);
    }

    private async Task HandleAddToCart(Product product)
    {
        await OnAddToCart.InvokeAsync(product);
    }

    private void HandleProductsChanged(List<ProductChange> changes)
    {
        var hasChanges = false;

        foreach (var change in changes)
        {
            var existingIndex = _products.FindIndex(p => p.Sku == change.Sku);

            switch (change.Operation.ToLowerInvariant())
            {
                case "update":
                case "create":
                    if (change.Product != null)
                    {
                        if (existingIndex >= 0)
                        {
                            _products[existingIndex] = change.Product;
                        }
                        else if (ShouldIncludeProduct(change.Product))
                        {
                            _products.Add(change.Product);
                        }
                        hasChanges = true;
                    }
                    break;

                case "delete":
                    if (existingIndex >= 0)
                    {
                        _products.RemoveAt(existingIndex);
                        hasChanges = true;
                    }
                    break;
            }
        }

        if (hasChanges)
        {
            InvokeAsync(StateHasChanged);
            InvokeAsync(() => EmitDeltaAppliedEvent(changes));
        }
    }

    private bool ShouldIncludeProduct(Product product)
    {
        if (!string.IsNullOrEmpty(Category) &&
            !string.Equals(product.Category, Category, StringComparison.OrdinalIgnoreCase))
        {
            return false;
        }

        if (!string.IsNullOrEmpty(Search) &&
            !product.Title.Contains(Search, StringComparison.OrdinalIgnoreCase) &&
            !product.Summary.Contains(Search, StringComparison.OrdinalIgnoreCase))
        {
            return false;
        }

        return true;
    }

    private void HandleServiceError(string error)
    {
        _hasError = true;
        _errorMessage = error;
        InvokeAsync(StateHasChanged);
    }

    private async Task StartDeltaRefresh()
    {
        await ProductService.StartDeltaRefreshAsync(DeltaRefreshInterval);
    }

    private string GetGridClass()
    {
        return GridColumns.ToLowerInvariant() switch
        {
            "2" => "grid-cols-2",
            "3" => "grid-cols-3",
            "4" => "grid-cols-4",
            "auto" => "grid-cols-auto",
            _ => "grid-cols-auto"
        };
    }

    private string GetItemRange()
    {
        if (_response == null || _response.TotalCount == 0)
            return "0";

        var start = ((_response.Page - 1) * _response.PageSize) + 1;
        var end = Math.Min(_response.Page * _response.PageSize, _response.TotalCount);
        return $"{start}-{end}";
    }

    private int GetTotalPages()
    {
        if (_response == null || _response.TotalCount == 0)
            return 1;

        return (int)Math.Ceiling((double)_response.TotalCount / _response.PageSize);
    }

    private async Task EmitDeltaAppliedEvent(List<ProductChange> changes)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("window.dispatchEvent",
                new {
                    type = "product.delta.applied",
                    detail = new {
                        changesCount = changes.Count,
                        timestamp = DateTime.UtcNow.ToString("O"),
                        category = Category,
                        search = Search
                    }
                });
        }
        catch (Exception ex)
        {
            // Silently handle JS interop errors
            Console.WriteLine($"Failed to emit product.delta.applied event: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        ProductService.OnProductsChanged -= HandleProductsChanged;
        ProductService.OnError -= HandleServiceError;

        _deltaRefreshTimer?.Dispose();

        if (EnableDeltaRefresh)
        {
            await ProductService.StopDeltaRefreshAsync();
        }
    }
}