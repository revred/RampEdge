name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        fail_ci_if_error: false

    - name: Pack NuGet package
      run: dotnet pack ./Maker.RampEdge/Maker.RampEdge.csproj --configuration Release --no-build --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nuget-package
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'release'

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: nuget-package
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Publish to NuGet
      run: |
        for package in ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
        do
          dotnet nuget push "$package" --api-key "${{ secrets.NUGET_API_KEY }}" --source ${{ env.NUGET_SOURCE_URL }} --skip-duplicate
        done

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: nuget-package
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Publish to GitHub Packages
      run: |
        for package in ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
        do
          dotnet nuget push "$package" --api-key "${{ secrets.GITHUB_TOKEN }}" --source "https://nuget.pkg.github.com/revred/index.json" --skip-duplicate
        done